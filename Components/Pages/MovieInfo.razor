@page "/MovieInfo/{MovieId:int}"
@using MovieSite.ApiClient
@using MovieSite.Models
@inject IApiClient ApiClient
@inject IApiService ApiService

<div class="MovieInfo">
    

@if (movieDetails != null)
{
    <style>
        body {
            background-image: url('@($"https://image.tmdb.org/t/p/w1280{movieDetails.backdrop_path}")');
        }
    </style>

        <h2>@movieDetails.Title</h2>
        <p><strong>Overview:</strong> @movieDetails.Overview</p>
        <p><strong>Release Year:</strong> @DateTime.Parse(movieDetails.release_date).Year</p>
        <img src="https://image.tmdb.org/t/p/w500/@movieDetails.poster_path" alt="@movieDetails.Title" />
        <p><strong>Genres:</strong>&nbsp;
            @foreach (var genre in movieDetails.Genres)
            {
                <span>@genre.name</span>
                @if (genre != movieDetails.Genres.Last()) { <span>, </span> }
            }
        </p>

        <p><strong>Actors:</strong></p>
        <ul>
            @foreach (var actor in movieCredits.Cast.Take(10))
            {
                <li>
                    <span>@actor.Name as @actor.Character</span>
                </li>
            }
        </ul>

        <p><strong>Directors:</strong></p>
        <ul>
            @foreach (var director in movieCredits.Crew.Where(c => c.Job == "Director"))
            {
                <li>
                    <span>@director.Name</span>
                </li>
            }
        </ul>

        <p><strong>Vote Average:</strong> @movieDetails.Vote_average</p>
        <p><strong>Popularity:</strong> @movieDetails.Popularity</p>
}
else
{
    <p>Loading...</p>
}

</div>
@code {
    [Parameter]
    public int MovieId { get; set; }
    private Movie movieDetails { get; set; }
    public MovieCredits movieCredits;
    
    protected override async Task OnInitializedAsync()
    { 
        movieDetails = await ApiClient.GetMovieByIdAsync(MovieId);
        
        movieCredits = await ApiClient.GetMovieCreditsAsync(MovieId);
    }
}
